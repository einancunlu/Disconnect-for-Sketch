

// The codes here are mostly taken from different resources.


/* 
The MIT License (MIT)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


function removeLayer(layer) {
	
  var parent = [layer parentGroup]
  if (parent)[parent removeLayer: layer]
}

function addLayer(name, type, parent) {
	
  var parent = parent ? parent : stage,
    layer = [parent addLayerOfType: type]
  if (name)[layer setName: name]
  return layer
}

function addGroup(name, parent) {
	
  return addLayer(name, 'group', parent)
}

function isInt(value) {
	
  return !isNaN(value) && 
         parseInt(Number(value)) == value && 
         !isNaN(parseInt(value, 10))
}

function saveObjectToUserDefaults(object, key) {
	
	var configs  = [NSMutableDictionary dictionary]
	[configs setObject: object forKey: key]
	[defaults registerDefaults: configs]
	[defaults synchronize]
}

function setLayerSizeEqualToReferenceLayer(layer, referenceLayer) {
	
	var rect = [referenceLayer absoluteRect]
	[[layer absoluteRect] setX: [rect x]]
	[[layer absoluteRect] setY: [rect y]]
	[[layer absoluteRect] setWidth: [rect width]]
	[[layer absoluteRect] setHeight: [rect height]]
}

function checkPluginUpdate() {
	
	var manifestFilePath = scriptFolder + "/manifest.json"
	var manifestJSON = getJSONFromFile(manifestFilePath)
	var isThereNewUpdate = false
	try {
		var response = getJSONFromURL('https://raw.githubusercontent.com/einancunlu/Disconnect-for-Sketch/master/Disconnect.sketchplugin/Contents/Sketch/manifest.json')
		if (response && response.version) {
			if (response.version.toString() != manifestJSON.version.toString()) {
				isThereNewUpdate = true
			}
		}		
	} catch (e) {
		log(e)
		return false
	}
	return isThereNewUpdate
}


//--------------------------------------
// JSON
//--------------------------------------


function getJSONFromFile(filePath) {
	
	var data = [NSData dataWithContentsOfFile: filePath]
	return [NSJSONSerialization JSONObjectWithData: data options: 0 error: nil]
}

function getJSONFromURL(url) {
	
	var request = [NSURLRequest requestWithURL: [NSURL URLWithString:url]],
		response = [NSURLConnection sendSynchronousRequest: request returningResponse: nil error: nil],
		responseObj = [NSJSONSerialization JSONObjectWithData: response options: nil error: nil]
	return responseObj
}


//------------------------------------------
//  Working with Files and Directories
//------------------------------------------


function getTempFolderPath(withName) {
	
	var fileManager = [NSFileManager defaultManager]
	var cachesURL = [[fileManager URLsForDirectory: NSCachesDirectory inDomains: NSUserDomainMask] lastObject]
	if(typeof withName !== 'undefined') return [[cachesURL URLByAppendingPathComponent: kPluginDomain] path] + "/" + withName
	return [[cachesURL URLByAppendingPathComponent: kPluginDomain] path] + "/" + [[NSDate date] timeIntervalSince1970]
}

function createFolderAtPath(pathString) {
	
	var fileManager = [NSFileManager defaultManager]
	if([fileManager fileExistsAtPath: pathString]) return true
	return [fileManager createDirectoryAtPath: pathString withIntermediateDirectories:true attributes:nil error:nil]
}

function cleanUpTempFolder(folderPath) {
	
	[[NSFileManager defaultManager] removeItemAtPath: folderPath error:nil]
}

function writeTextToFile(text, filePath) {
	
	var t = [NSString stringWithFormat:@"%@", text],
		f = [NSString stringWithFormat:@"%@", filePath]
    return [t writeToFile:f atomically: true encoding: NSUTF8StringEncoding error: nil]
}


//------------------------------------------
//  Communicating with Binary Helper App
//------------------------------------------


function sendParamsToHelperApp(context, appName, params, tempFolderPath) {
	
	var appPath = scriptFolder + "/" + appName,
		uniqueID = [[NSUUID UUID] UUIDString],
		bundlePath = [[NSBundle mainBundle] bundlePath],
		appName = [[NSFileManager defaultManager] displayNameAtPath: bundlePath],
		d = [NSMutableDictionary new],
		val
	
	if (typeof tempFolderPath == 'undefined') {
		tempFolderPath = getTempFolderPath("temp-commands/"+uniqueID)
	}
	
	var jsonPath = tempFolderPath + "/pl.skjs"
	
	for (var key in params) {
		val = params[key]
		[d setValue:val forKey:key]
	}
	[d setValue:scriptPath forKey: "scriptPath"]
	[d setValue:scriptFolder forKey: "scriptFolder"]
	[d setValue:appName forKey: "appName"]
	
	var jData = [NSJSONSerialization dataWithJSONObject: d options: 0 error: nil],
		jsonString = [[NSString alloc] initWithData: jData encoding: NSUTF8StringEncoding]
	
	createFolderAtPath(tempFolderPath)
	writeTextToFile(jsonString, jsonPath)
 
	if(![[NSWorkspace sharedWorkspace] openFile: jsonPath withApplication: appPath andDeactivate:true]]) {
		// If can't launch the helper app
		var alert = [COSAlertWindow new]
		var suffix = params["selectionCount"] > 1 ? "s" : ""
		alert.setMessageText("Disconnect selection" + suffix + " from:")
		
		var params = params["settings"] 
		alert.addAccessoryView(createCheckbox("Group Symbols", params["groupSymbolsSwtich"], "1"))
		alert.addAccessoryView(createCheckbox("Layer Styles", params["layerStylesSwtich"], "2"))
		alert.addAccessoryView(createCheckbox("Text Styles", params["textStylesSwtich"], "3"))
		
		alert.addButtonWithTitle('Proceed') 
		alert.addButtonWithTitle("Cancel") 
		
		var responseCode = alert.runModal() 
		if (responseCode == 1000) { 
			var groupSymbols = alert.viewAtIndex(0).state()
			var layerStyles = alert.viewAtIndex(1).state() 
			var textStyles = alert.viewAtIndex(2).state()
			disconnectSelection(context, groupSymbols, layerStyles, textStyles)
		}
	}
}


//------------------------------------------
//  UI Components
//------------------------------------------


function createCheckbox(label, flag, keyEquivalent) {
		
	flag = (flag == false) ? NSOffState : NSOnState
	var checkbox = NSButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 18))
	checkbox.setButtonType(NSSwitchButton)
	checkbox.setTitle(label)
	checkbox.setState(flag)
	checkbox.setKeyEquivalent(keyEquivalent)
	return checkbox
}

